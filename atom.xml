<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ELUM&#39;s Blog</title>
  
  
  <link href="http://elum.github.io/atom.xml" rel="self"/>
  
  <link href="http://elum.github.io/"/>
  <updated>2021-05-25T11:45:46.750Z</updated>
  <id>http://elum.github.io/</id>
  
  <author>
    <name>ELUM</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>堆栈</title>
    <link href="http://elum.github.io/2021/04/16/%E5%A0%86%E6%A0%88/"/>
    <id>http://elum.github.io/2021/04/16/%E5%A0%86%E6%A0%88/</id>
    <published>2021-04-15T16:00:00.000Z</published>
    <updated>2021-05-25T11:45:46.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><p>空</p><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>优先队列</p><p>数组 </p><p>​    插入: 元素总是插入尾部</p><p>​    删除: 查找最大或最小的关键字 从数组中删除需要移动元素</p><p>有序数组</p><p>​    插入: 找到合适的位置 移动元素并插入</p><p>​    删除: 删去最后一个数组</p><p>链表</p><p>​    插入: 总是插入链表的头部</p><p>​    删除: 查找最大或最小的关键字 删除结点</p><p>有序链表</p><p>​    插入: 找到合适的位置</p><p>​    删除: 删除首元素或最后元素</p><p>堆的两个特性</p><p>​    结构性: 用数组表示的完全的二叉树</p><p>​    有序性: 任一结点的关键字是其子树所有结点的最大值或最小值</p><p>​        大顶堆(MaxHeap)：最大值</p><p>​        小顶堆(MaxHeap)：最小值</p><p><img src="https://7.dusays.com/2021/04/16/0c63705f658cf.png" alt="img" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆栈&quot;&gt;&lt;a href=&quot;#堆栈&quot; class=&quot;headerlink&quot; title=&quot;堆栈&quot;&gt;&lt;/a&gt;堆栈&lt;/h1&gt;&lt;p&gt;空&lt;/p&gt;
&lt;h1 id=&quot;堆&quot;&gt;&lt;a href=&quot;#堆&quot; class=&quot;headerlink&quot; title=&quot;堆&quot;&gt;&lt;/a&gt;堆&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://elum.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://elum.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Mysql</title>
    <link href="http://elum.github.io/2021/03/29/mysql/"/>
    <id>http://elum.github.io/2021/03/29/mysql/</id>
    <published>2021-03-29T11:00:00.000Z</published>
    <updated>2021-05-25T11:53:22.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>以下都在DOS中进行</p><h2 id="创建一个数据库"><a href="#创建一个数据库" class="headerlink" title="创建一个数据库"></a>创建一个数据库</h2><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">CREATE DATABASE 数据库名 DEFAULT charset utf8 COLLATE utf8_general_ci;</code></pre><blockquote><p><strong>COLLATE</strong>为数据库的校对规则 指定数据库如何排序</p></blockquote><blockquote><p><strong>utf8_general_ci</strong>: 校对速度快，但准确度稍差。</p></blockquote><blockquote><p><strong>utf8_unicode_ci</strong>: 准确度高，但校对速度稍慢。</p></blockquote><p>若数据库中有德语、法语或者俄语需求，需使用utf8_unicode_ci。<br>其他情况用utf8_general_ci即可。</p><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">DROP DATABASE 数据库名称;</code></pre><h2 id="查看MYSQL中的数据库"><a href="#查看MYSQL中的数据库" class="headerlink" title="查看MYSQL中的数据库"></a>查看MYSQL中的数据库</h2><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">SHOW DATABASES;</code></pre><h2 id="操作数据表"><a href="#操作数据表" class="headerlink" title="操作数据表"></a>操作数据表</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">use 数据库名; &#x2F;&#x2F;首先指定操作数据库CREATE　TABLE 表名(    字段名1 数据类型 [约束条件],    字段名2 数据类型 [约束条件],    ...); </code></pre><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a><strong>SELECT</strong></h3><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">SELECT * FROM 表名 WHERE 条件 ORDER BY 字段名 ASC&#x2F;DESC;</code></pre><p>为什么不推荐使用*来查询</p><blockquote><p>以下摘自网络</p></blockquote><p>1,安全，如果程序设计有问题, 被人构造出一个联表，等于什么都出来了</p><p>2, myisam下select部分如果是索引，而且内存足够，会从内存里取</p><p>3, 如果有text之类的大字段不需要选取，select部分字段快</p><p>其他情况下两者效率没多大区别</p><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a><strong>UPDATE</strong></h3><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">UPDATE 表名 SET 字段名1&#x3D;new-value1，字段名2&#x3D;new-value2 WHERE 条件 ORDER BY 字段名 ASC&#x2F;DESC;</code></pre><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a><strong>DELETE</strong></h3><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">DELETE FROM 表名 WHERE 条件;</code></pre><h3 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a><strong>INSERT INTO</strong></h3><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">INSERT INTO 表名 (字段名1,字段名2,...)                VALUES                (value1,value2,...)</code></pre><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">DESC 表名称;</code></pre><h2 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">LIMIT 1;LIMIT n*pagesize,pagesize;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;p&gt;以下都在DOS中进行&lt;/p&gt;
&lt;h2 id=&quot;创建一个数据库&quot;&gt;&lt;a href=&quot;#创建一个数据库&quot; class=&quot;</summary>
      
    
    
    
    <category term="数据库" scheme="http://elum.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Mysql" scheme="http://elum.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记</title>
    <link href="http://elum.github.io/2020/11/07/JAVA%E7%AC%94%E8%AE%B0/"/>
    <id>http://elum.github.io/2020/11/07/JAVA%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-06T16:00:00.000Z</published>
    <updated>2021-05-25T12:09:41.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><p><strong>前言：计算机方面的笔记记纸上就我个人而言不怎么喜欢<br>所以记在 Blog 上更方便(纯属因为记在本子上太麻烦了！)</strong><br>编程工具一般都是使用 <strong>Eclipse</strong> 和 <strong>IDEA</strong><br>PS:不足的部分会慢慢补充</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><table><thead><tr><th align="center">访问控制</th><th align="center">private</th><th align="center">protected</th><th align="center">public</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">类，方法和变量修饰符</td><td align="center">abstract</td><td align="center">class</td><td align="center">extends</td><td align="center">final</td><td align="center">implements</td><td align="center">interface</td><td align="center">native</td></tr><tr><td align="center"></td><td align="center">new</td><td align="center">staic</td><td align="center">strictfp</td><td align="center">synchronized</td><td align="center">transient</td><td align="center">volatile</td><td align="center"></td></tr><tr><td align="center">程序控制</td><td align="center">break</td><td align="center">continue</td><td align="center">return</td><td align="center">do</td><td align="center">while</td><td align="center">if</td><td align="center">else</td></tr><tr><td align="center"></td><td align="center">for</td><td align="center">instanceof</td><td align="center">switch</td><td align="center">case</td><td align="center">default</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">错误处理</td><td align="center">try</td><td align="center">catch</td><td align="center">throw</td><td align="center">throws</td><td align="center">finally</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">包相关</td><td align="center">import</td><td align="center">package</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">基本类型</td><td align="center">boolean</td><td align="center">byte</td><td align="center">char</td><td align="center">double</td><td align="center">float</td><td align="center">int</td><td align="center">long</td></tr><tr><td align="center"></td><td align="center">short</td><td align="center">null</td><td align="center">true</td><td align="center">false</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">变量引用</td><td align="center">super</td><td align="center">this</td><td align="center">void</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">保留字</td><td align="center">goto</td><td align="center">const</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>一般都是用在某个整数类型变量 增加 1 或 减少 1，Java 特殊运算符，用于这种表达式，叫做自增运算符 ++ 和自减运算符 – 。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//a = 0, i = 1</span>a <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token comment">//a = 1, i = 1</span>a <span class="token operator">=</span> i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">//a = 0, i = -1</span>a <span class="token operator">=</span> <span class="token operator">--</span>i<span class="token punctuation">;</span>        <span class="token comment">//a = -1, i = -1</span></code></pre><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出比较简单<br>区分以下两个的区别</p><pre class="language-Java" data-language="Java"><code class="language-Java">System.out.print();            &#x2F;&#x2F;输出不换行System.out.println();          &#x2F;&#x2F;输出换行</code></pre><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入的方法也有几种 我就先拿简单的记录<br>输入需要注意要先导入类</p><pre class="language-Java" data-language="Java"><code class="language-Java">import java.util.Scanner;      &#x2F;&#x2F;通过Scannner类获取用户的输入</code></pre><p>接下来在函数main内键入</p><pre class="language-Java" data-language="Java"><code class="language-Java">Scanner in &#x3D; new Scanner(System.in);            &#x2F;&#x2F;从键盘接收数据 in可以改变int a &#x3D; in.nextInt();                           &#x2F;&#x2F;从键盘接收整型类型内容String b &#x3D; in.nextLine();                       &#x2F;&#x2F;从键盘接收一条内容</code></pre><h2 id="逻辑控制语句"><a href="#逻辑控制语句" class="headerlink" title="逻辑控制语句"></a>逻辑控制语句</h2><h3 id="IF…Else语句"><a href="#IF…Else语句" class="headerlink" title="IF…Else语句"></a>IF…Else语句</h3><pre class="language-Java" data-language="Java"><code class="language-Java">int a&#x3D;0;if (a&#x3D;&#x3D;0)&#123;    a++;&#125;</code></pre><p>if…else的逻辑图<br><img src="https://7.dusays.com/2020/11/08/7c4bed27de6ec.png" loading="lazy"></p><h3 id="Switch…Case语句"><a href="#Switch…Case语句" class="headerlink" title="Switch…Case语句"></a>Switch…Case语句</h3><pre class="language-Java" data-language="Java"><code class="language-Java">int a&#x3D;0;switch(a)&#123;case 0 :    a++;  &#x2F;&#x2F;语句1case 1 :    ++a;  &#x2F;&#x2F;语句2case 2 :    a++;  &#x2F;&#x2F;语句3default :    break;  &#x2F;&#x2F;语句&#125;</code></pre><p>default可有可无<br>作用是在case都检索完<br>没有找到对应的条件<br>才执行default下的语句<br>Switch…Case逻辑流程<br><img src="https://7.dusays.com/2020/11/08/a98b1dd27bdf5.png" loading="lazy"></p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="For循环"><a href="#For循环" class="headerlink" title="For循环"></a>For循环</h3><pre class="language-Java" data-language="Java"><code class="language-Java"> int a&#x3D;0; For (int b&#x3D;0; true; b&#x3D;b+1;)&#123;            &#x2F;&#x2F;(初始化表达式;判断表达式;跟表达式)    a++;                            &#x2F;&#x2F;循环体函数&#125;</code></pre><p>下图是for循环的逻辑过程<br><img src="https://7.dusays.com/2020/11/07/a739030154e4d.png" loading="lazy"></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre class="language-Java" data-language="Java"><code class="language-Java">int a&#x3D;0;while(true)&#123;    &#x2F;&#x2F;循环条件   a++;         &#x2F;&#x2F;循环体&#125;</code></pre><p>while循环的逻辑简单点<br><img src="https://7.dusays.com/2020/11/08/5c4e39a3e6302.png" loading="lazy"></p><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><p>永远的累加~</p><pre class="language-Java" data-language="Java"><code class="language-Java">int a&#x3D;0;do&#123;    a++;    &#x2F;&#x2F;循环体&#125;while()    &#x2F;&#x2F;循环条件</code></pre><p>do-while逻辑图<br><img src="https://7.dusays.com/2020/11/08/b82a20c576a75.png" loading="lazy"></p><h1 id="Java-面向对象"><a href="#Java-面向对象" class="headerlink" title="Java 面向对象"></a>Java 面向对象</h1><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p><strong>关键字</strong> : <strong><em>abstract</em></strong></p><p>抽象起到规范的作用 实现多个子类中共用的部分 不用重复写到实现类中</p><p>如类中有抽象化的方法 类必须抽象化</p><p>被抽象化的方法 不能有方法体</p><pre class="language-Java" data-language="Java"><code class="language-Java">public abstract class 类名&#123;    修饰符 abstract void 方法名();&#125;</code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口中所有的方法都是抽象方法</p><p>接口中所有的内容都是公共的 所有的变量都是全局静态变量</p><p>接口使用 interface 来声明 不再是类</p><p>与类的区别是 类只能单继承 接口支持多实现</p><p>接口同样具有多态性</p><p>接口可以把多种不相关的内容进行整合</p><pre class="language-Java" data-language="Java"><code class="language-Java">public interface 类名&#123;    void 类名();                  &#x2F;&#x2F;方法一    public abstract void 方法名();  &#x2F;&#x2F;方法二 此方法可以省略&#125;</code></pre><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><h2 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h2><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>实现数组的遍历,并以一个美观的形式输出在控制台</p><pre class="language-Java" data-language="Java"><code class="language-Java">int[] arr &#x3D; new int[]&#123;1,2,3,4,5&#125;;System.out.println(Arrays.toString(arr));</code></pre><h3 id="sort方法"><a href="#sort方法" class="headerlink" title="sort方法"></a>sort方法</h3><p>实现把数组升序排序</p><pre class="language-Java" data-language="Java"><code class="language-Java">int[] arr &#x3D; new int[]&#123;5,4,3,2,1&#125;;Arrays.sort(arr)System.out.println(Arrays.toString(arr));</code></pre><h3 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h3><p>输出在数组中查找需要查找的数的索引值<br>必须在有序的数组下查找 找不到则返回负数</p><pre class="language-Java" data-language="Java"><code class="language-Java">int[] arr &#x3D; new int[]&#123;5,4,3,2,1&#125;;Arrays.sort(arr)System.out.println(Arrays.binarySearch(arr,3));</code></pre><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><pre class="language-Java" data-language="Java"><code class="language-Java">int[] arr &#x3D; new int[]&#123;5,4,3,2,1&#125;;int[] newArr&#x3D;Arrays.copyOf(arr,6); &#x2F;&#x2F;复制数组，不足的部分0填充System.out.println(Arrays.toString(arr));int[] newArr02&#x3D;Arrays.copyOf(arr,2,4); &#x2F;&#x2F;复制[2,4) 区间形式System.out.println(Arrays.toString(arr));</code></pre><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><pre class="language-Java" data-language="Java"><code class="language-Java">int[] arr1 &#x3D; new int[]&#123;5,4,3,2,1&#125;;int[] arr2 &#x3D; new int[]&#123;5,4,3,2,1&#125;;System.out.println(arr1&#x3D;&#x3D;arr2); &#x2F;&#x2F;false 比较的是左右两侧的地址的值System.out.println(Arrays.equals(arr1,arr2)); &#x2F;&#x2F;true 比较的数组元素具体的值</code></pre><h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//全部填充为0</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fillI</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[0,2)填充为1</span></code></pre><h3 id="复制-1"><a href="#复制-1" class="headerlink" title="复制"></a>复制</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>arr1<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>静态&gt;构造块&gt;空构造器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;前言：计算机方面的笔记记纸上就我个人而言不怎么喜欢&lt;br&gt;所以记在 Blog 上更方便(纯属</summary>
      
    
    
    
    <category term="编程语言" scheme="http://elum.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Java" scheme="http://elum.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
